@inject NavigationManager NavigationManager
@page "/"
@page "/manageTask"
@page "/manageTask/{Action}/{TaskTitle}/{Month:int}/{Day:int}/{Year:int}"
@page "/manageTask/{Action}/{TaskId:int}/{TaskTitle}/{Month:int}/{Day:int}/{Year:int}"
@page "/manageTask/{Action}/{TaskId:int}/{TaskTitle}"

<PageTitle>Task Manager</PageTitle>

<h3>Undone Tasks (@taskList.Count(task => !task.IsDone))</h3>

@switch(@Action){
    case Operations.ADD:
        DateOnly myDate = new DateOnly(year:Year, month:Month, day:Day);
        AddNewTask(@TaskTitle, myDate);
        NavigateToManageTaskPage();
        break;

    case Operations.UPDATE:
        UpdateTask(@TaskId);
        NavigateToManageTaskPage();
        break;

    case Operations.DELETE:
        DeleteTask(@TaskId);
        NavigateToManageTaskPage();
        break;
}


    <div class="border">
        <div class="bg-info text-center display-6">Task Manager</div>

        <div class="container" id="main-container">

            <div class="container" id="task-list-container">
                
                    @foreach (var task in taskList) {
                        <input type="checkbox" class="block-inline" @bind="task.IsDone">
                        @if(task.IsDone){
                            <a href="/editPage/@task.Id/@task.Title/@task.Date" class="list-group-item list-group-item-action flex-column align-items-start">
                            <del class="col-9 mt-1 block-inline h5" id="task-title">@task.Title</del>
                            <div>
                                <small for="my-date">Due:</small>
                                <small id="my-date">@task.Date</small>
                            </div>
                        </a>
                        }else{
                            <a href="/editPage/@task.Id/@task.Title/@task.Date" class="list-group-item list-group-item-action flex-column align-items-start">
                                <span class="col-9 mt-1 h5" id="task-title">@task.Title</span>
                                <div>
                                    <small for="my-date">Due:</small>
                                    <small id="my-date">@task.Date</small>
                                </div
                            </a>
                        }
                        <br>
                    }
                
            </div>

            <div class="d-grid mt-5 mb-3">
                <button class="btn btn-primary" @onclick="NavigateToAddTaskPage">ADD TASK</button>
            </div>
        </div>
    </div>


@code {
    private static List<TaskItem> taskList = new();
        
    [Parameter]
    public string Action{get; set;}
    [Parameter]
    public int TaskId{get; set;}
    [Parameter]
    public string Title{get; set;}
    [Parameter]
    public string TaskTitle{get; set;}
    [Parameter]
    public int Month{get; set;}
    [Parameter]
    public int Day{get; set;}
    [Parameter]
    public int Year{get; set;}
    private void NavigateToAddTaskPage(){
        NavigationManager.NavigateTo("/addTask");
    }
    private void NavigateToManageTaskPage(){
        NavigationManager.NavigateTo("/manageTask");
    }
    
    private static int idCounter = 0;
    public void AddNewTask(string title, DateOnly date){
        TaskItem taskItem = new TaskItem();
        taskItem.Id = idCounter++;
        taskItem.Title = title;
        taskItem.IsDone = false;
        taskItem.Date = date;
        taskList.Add(taskItem);
    }
    public void UpdateTask(int id){
        foreach(var task in taskList){
            if(task.Id == id){
                task.Title = TaskTitle;
                task.Date = new DateOnly(Year, Month, Day);
                break;
            }
        }
    }
    public void DeleteTask(int id){
        int listSize = taskList.Count;
         for(int i = 0; i < listSize; i++){
            if(taskList[i].Id == id){
                taskList.RemoveAt(i);
                break;
            }
        }
    }
        
}